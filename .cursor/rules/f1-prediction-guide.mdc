---
description: 
globs: 
alwaysApply: true
---
# F1 Prediction System Guide

This is a comprehensive Formula 1 prediction system built with advanced machine learning techniques, ensemble modeling, and real-time prediction capabilities.

## üéØ System Overview

The system predicts F1 qualifying and race results using ensemble models (LightGBM, XGBoost, Random Forest, Neural Networks) with sophisticated feature engineering and time-aware data splitting.

## üöÄ Main Entry Points

- **[main.py](mdc:main.py)** - Primary application entry point with complete workflow orchestration
- **[example_usage.py](mdc:example_usage.py)** - Usage examples and testing scenarios
- **[test_system.py](mdc:test_system.py)** - System testing and validation
- **[predict_without_quali.py](mdc:predict_without_quali.py)** - Standalone race prediction without qualifying data

## üìÅ Core Package Structure

### Primary Modules
- **[f1_predictor/config.py](mdc:f1_predictor/config.py)** - Comprehensive system configuration (682 lines)
- **[f1_predictor/data_loader.py](mdc:f1_predictor/data_loader.py)** - Data collection and loading from FastF1 API (799 lines)
- **[f1_predictor/feature_engineering.py](mdc:f1_predictor/feature_engineering.py)** - Advanced feature engineering pipeline (1131 lines)
- **[f1_predictor/model_training.py](mdc:f1_predictor/model_training.py)** - Ensemble model training with hyperparameter optimization (602 lines)
- **[f1_predictor/prediction.py](mdc:f1_predictor/prediction.py)** - Prediction engine with confidence scoring (511 lines)
- **[f1_predictor/evaluation.py](mdc:f1_predictor/evaluation.py)** - Model evaluation and F1-specific metrics (473 lines)

### Support Modules
- **[f1_predictor/early_predictor.py](mdc:f1_predictor/early_predictor.py)** - Early season predictions with limited data
- **[f1_predictor/utils.py](mdc:f1_predictor/utils.py)** - Utility functions and helpers
- **[f1_predictor/__init__.py](mdc:f1_predictor/__init__.py)** - Package initialization and exports

## üîß Configuration System

All system behavior is controlled through **[f1_predictor/config.py](mdc:f1_predictor/config.py)**:

### Key Configuration Sections:
- **Model Types**: Available models (lightgbm, xgboost, random_forest, neural_network)
- **Ensemble Weights**: Auto-optimized weights for model combination
- **Feature Engineering**: Rolling window sizes, circuit categorization
- **Performance Settings**: Hyperparameter optimization, feature selection
- **Data Paths**: File locations for models, predictions, and data
- **Logging**: Comprehensive logging configuration

## ü§ñ Machine Learning Pipeline

### 1. Data Flow
```
FastF1 API ‚Üí [data_loader.py] ‚Üí Raw F1 Data ‚Üí [feature_engineering.py] ‚Üí Features ‚Üí [model_training.py] ‚Üí Trained Models ‚Üí [prediction.py] ‚Üí Predictions
```

### 2. Feature Engineering Categories
- **Driver Performance**: Rolling averages, consistency metrics, win rates
- **Team Performance**: Reliability scores, development trends
- **Circuit Analysis**: Track categorization, overtaking difficulty
- **Contextual Features**: Championship pressure, season progress

### 3. Model Training
- **Ensemble Approach**: Multiple algorithms combined with optimized weights
- **Hyperparameter Optimization**: Automated tuning with Optuna
- **Time-aware Splitting**: Prevents data leakage in predictions
- **Feature Selection**: Intelligent selection for optimal performance

## üìä Prediction Workflows

### Complete Weekend Prediction
Use **[main.py](mdc:main.py)** with F1PredictionSystem class:
- Qualifying predictions (grid positions)
- Pre-qualifying race predictions (historical data only)
- Post-qualifying race predictions (with actual qualifying results)

### Live Updates
Real-time prediction updates when actual qualifying results become available.

### Key Prediction Types:
- **Qualifying**: Grid position predictions before sessions
- **Race (Pre-Quali)**: Race predictions without qualifying data
- **Race (Post-Quali)**: Race predictions incorporating actual qualifying
- **Live Updates**: Real-time updates during race weekends

## üìà Evaluation and Metrics

**[f1_predictor/evaluation.py](mdc:f1_predictor/evaluation.py)** provides F1-specific metrics:
- **MAE**: Mean Absolute Error in positions
- **Top-3/Top-5 Accuracy**: Predictions within 3/5 positions
- **Podium Precision**: Accuracy of podium predictions
- **Rank Correlation**: Spearman correlation between predicted/actual
- **Weighted MAE**: Position-weighted error (higher weight for better positions)

## üìÅ Directory Structure

### Data Storage
- **f1_data_real/**: Raw F1 data from FastF1
- **models/**: Trained model files and artifacts
- **predictions/**: Prediction outputs and results
- **evaluation/**: Evaluation reports and performance plots
- **reports/**: Generated prediction reports
- **visualizations/**: Charts and graphs
- **logs/**: System logs and debugging info

### Dependencies
- **[requirements.txt](mdc:requirements.txt)** - All Python dependencies with versions

## üõ† Development Guidelines

### When Working on Features:
1. **Configuration First**: Check **[f1_predictor/config.py](mdc:f1_predictor/config.py)** for relevant settings
2. **Feature Engineering**: Modify **[f1_predictor/feature_engineering.py](mdc:f1_predictor/feature_engineering.py)** for new features
3. **Model Changes**: Update **[f1_predictor/model_training.py](mdc:f1_predictor/model_training.py)** for model modifications
4. **Prediction Logic**: Adjust **[f1_predictor/prediction.py](mdc:f1_predictor/prediction.py)** for prediction changes

### Testing:
- Use **[test_system.py](mdc:test_system.py)** for comprehensive system testing
- Use **[example_usage.py](mdc:example_usage.py)** for usage examples

### Data Management:
- **[f1_predictor/data_loader.py](mdc:f1_predictor/data_loader.py)** handles all data fetching and loading
- FastF1 API integration for real-time F1 data

## üéØ Common Tasks

### Adding New Features:
1. Update feature engineering in **[f1_predictor/feature_engineering.py](mdc:f1_predictor/feature_engineering.py)**
2. Modify configuration in **[f1_predictor/config.py](mdc:f1_predictor/config.py)** if needed
3. Test with **[test_system.py](mdc:test_system.py)**

### Model Improvements:
1. Adjust hyperparameters in **[f1_predictor/config.py](mdc:f1_predictor/config.py)**
2. Modify ensemble weights in **[f1_predictor/model_training.py](mdc:f1_predictor/model_training.py)**
3. Update evaluation metrics in **[f1_predictor/evaluation.py](mdc:f1_predictor/evaluation.py)**

### Prediction Enhancements:
1. Update prediction logic in **[f1_predictor/prediction.py](mdc:f1_predictor/prediction.py)**
2. Modify confidence scoring algorithms
3. Enhance live update capabilities

This system represents a production-ready F1 prediction platform with sophisticated ML capabilities, comprehensive evaluation, and real-time prediction support.

