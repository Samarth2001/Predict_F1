---
description: 
globs: 
alwaysApply: true
---
# Technical Architecture & Development Patterns

## üèó System Architecture

### Core Design Patterns
- **Modular Pipeline**: Each stage (data loading, feature engineering, training, prediction) is isolated in separate modules
- **Configuration-Driven**: All behavior controlled through **[f1_predictor/config.py](mdc:f1_predictor/config.py)**
- **Ensemble Learning**: Multiple ML algorithms combined with optimized weights
- **Time-Aware Processing**: Proper handling of temporal data to prevent leakage

### Data Flow Architecture
```
1. Data Collection ([data_loader.py]) ‚Üí Raw F1 Data
2. Feature Engineering ([feature_engineering.py]) ‚Üí Engineered Features
3. Model Training ([model_training.py]) ‚Üí Trained Models
4. Prediction Engine ([prediction.py]) ‚Üí Predictions
5. Evaluation ([evaluation.py]) ‚Üí Performance Metrics
```

## üî¨ Machine Learning Pipeline

### Feature Engineering Strategy
**[f1_predictor/feature_engineering.py](mdc:f1_predictor/feature_engineering.py)** implements:
- **Rolling Windows**: Short (3), Medium (5), Long (10) race performance
- **Driver Metrics**: Win rates, podium rates, consistency scores
- **Team Performance**: Reliability, development trends, championship standings
- **Circuit Features**: Track categorization, weather impact, overtaking difficulty
- **Contextual Data**: Season progress, championship pressure, tire strategies

### Model Training Approach
**[f1_predictor/model_training.py](mdc:f1_predictor/model_training.py)** uses:
- **Ensemble Models**: LightGBM, XGBoost, Random Forest, Neural Networks
- **Hyperparameter Optimization**: Optuna-based automated tuning
- **Cross-Validation**: Time-aware splits to prevent data leakage
- **Feature Selection**: Automated selection for optimal performance
- **Model Stacking**: Advanced ensemble techniques

### Prediction Engine
**[f1_predictor/prediction.py](mdc:f1_predictor/prediction.py)** provides:
- **Multi-Scenario Predictions**: Pre/post qualifying scenarios
- **Confidence Scoring**: High/Medium/Low confidence levels
- **Live Updates**: Real-time integration of actual results
- **Weekend Workflows**: Complete race weekend prediction

## üìä Data Management

### Data Sources
- **FastF1 API**: Real-time F1 data through **[f1_predictor/data_loader.py](mdc:f1_predictor/data_loader.py)**
- **Historical Data**: Cached in `f1_data_real/` directory
- **Model Artifacts**: Stored in `models/` directory
- **Prediction Outputs**: Saved in `predictions/` directory

### File Conventions
- **CSV Format**: Primary data storage format
- **Pickle Files**: Model serialization (.pkl)
- **JSON Files**: Configuration and metadata
- **Log Files**: Comprehensive logging in `logs/`

## üéØ Configuration System

### Configuration Categories in **[f1_predictor/config.py](mdc:f1_predictor/config.py)**:

#### Model Configuration
```python
MODEL_TYPES = ['lightgbm', 'xgboost', 'random_forest', 'neural_network']
DEFAULT_MODEL_TYPE = 'ensemble'
ENSEMBLE_WEIGHTS = {...}  # Auto-optimized
```

#### Feature Engineering Settings
```python
N_ROLLING_SHORT = 3    # Recent form
N_ROLLING_MEDIUM = 5   # Medium term
N_ROLLING_LONG = 10    # Long term
STREET_CIRCUITS = [...]
HIGH_SPEED_CIRCUITS = [...]
```

#### Performance Optimization
```python
ENABLE_HYPERPARAMETER_OPTIMIZATION = True
ENABLE_FEATURE_SELECTION = True
ENABLE_MODEL_STACKING = True
OPTUNA_N_TRIALS = 100
```

#### Data Paths
```python
RACES_CSV_PATH = "f1_data_real/races.csv"
QUALI_CSV_PATH = "f1_data_real/qualifying.csv"
MODELS_DIR = "models/"
PREDICTIONS_DIR = "predictions/"
```

## üß™ Testing & Validation

### Test Files
- **[test_system.py](mdc:test_system.py)** - Comprehensive system testing
- **[example_usage.py](mdc:example_usage.py)** - Usage examples and integration tests

### Evaluation Framework
**[f1_predictor/evaluation.py](mdc:f1_predictor/evaluation.py)** implements F1-specific metrics:
- Position-based accuracy (Top-3, Top-5)
- Podium prediction precision
- Rank correlation analysis
- Weighted error metrics

### Performance Monitoring
- Automated model performance tracking
- Historical accuracy analysis
- Confidence score calibration
- Cross-validation reporting

## üîß Development Workflow

### Adding New Features
1. **Update Configuration**: Modify **[f1_predictor/config.py](mdc:f1_predictor/config.py)**
2. **Feature Engineering**: Extend **[f1_predictor/feature_engineering.py](mdc:f1_predictor/feature_engineering.py)**
3. **Model Integration**: Update **[f1_predictor/model_training.py](mdc:f1_predictor/model_training.py)**
4. **Prediction Logic**: Enhance **[f1_predictor/prediction.py](mdc:f1_predictor/prediction.py)**
5. **Testing**: Validate with **[test_system.py](mdc:test_system.py)**

### Model Improvements
1. **Hyperparameter Tuning**: Adjust Optuna settings in config
2. **Ensemble Weights**: Modify combination strategies
3. **Feature Selection**: Update selection algorithms
4. **Validation**: Test with historical data

### Debugging Guidelines
- **Logging**: Comprehensive logging throughout system
- **Data Validation**: Input/output data validation
- **Model Diagnostics**: Feature importance, prediction confidence
- **Error Handling**: Graceful failure recovery

## üöÄ Performance Optimization

### Speed Optimizations
- **Parallel Processing**: Multi-threaded feature engineering
- **Caching**: Aggressive caching of expensive computations
- **Data Types**: Optimized pandas data types
- **Memory Management**: Efficient memory usage patterns

### Accuracy Improvements
- **Feature Engineering**: Sophisticated domain-specific features
- **Ensemble Methods**: Multiple model combination
- **Hyperparameter Optimization**: Automated tuning
- **Data Quality**: Comprehensive data cleaning

## üìà Monitoring & Maintenance

### System Health
- **Data Freshness**: Automated data quality checks
- **Model Performance**: Continuous accuracy monitoring
- **Prediction Confidence**: Confidence score tracking
- **Error Rates**: Exception and failure monitoring

### Deployment Considerations
- **Dependencies**: **[requirements.txt](mdc:requirements.txt)** with pinned versions
- **Environment**: Python 3.8+ compatibility
- **Data Storage**: Configurable data directory paths
- **Logging**: Production-ready logging configuration

This architecture supports a robust, scalable F1 prediction system with comprehensive ML capabilities and production-ready features.

